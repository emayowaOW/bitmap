#include <iostream>
#include <deque>
#include "bmp.hpp"

using namespace std;

// Struct to store pixel coordinates
struct pixel {
    int x, y;
    pixel(int x_ = 0, int y_ = 0) : x(x_), y(y_) {}
};

// ----------------------
// Flood Fill Algorithm
// ----------------------
void floodFill(BMP& image, int startX, int startY, color fillColor)
{
    int h = image.get_height();
    int w = image.get_width();

    // Check bounds
    if (startX < 0 || startX >= w || startY < 0 || startY >= h)
        return;

    color startColor = image.get_pixel(startX, startY);
    if (startColor == fillColor)
        return;

    bool visited[1000][1000] = { false };

    deque<pixel> q;
    q.push_back(pixel(startX, startY));
    visited[startY][startX] = true;

    int dx[4] = { 1, -1, 0, 0 };
    int dy[4] = { 0, 0, 1, -1 };

    while (!q.empty()) {
        pixel p = q.front();
        q.pop_front();

        image.set_pixel(p.x, p.y, fillColor);

        for (int i = 0; i < 4; i++) {
            int nx = p.x + dx[i];
            int ny = p.y + dy[i];

            if (nx >= 0 && nx < w && ny >= 0 && ny < h && !visited[ny][nx]) {
                color c = image.get_pixel(nx, ny);
                if (c == startColor) {
                    visited[ny][nx] = true;
                    q.push_back(pixel(nx, ny));
                }
            }
        }
    }
}

// ----------------------
// Blur Effect
// ----------------------
void blur(BMP& image)
{
    int h = image.get_height();
    int w = image.get_width();

    BMP temp = image; // copy for reference

    for (int y = 1; y < h - 1; y++) {
        for (int x = 1; x < w - 1; x++) {
            int rSum = 0, gSum = 0, bSum = 0;
            int count = 0;

            // Average color of neighboring pixels
            for (int dy = -1; dy <= 1; dy++) {
                for (int dx = -1; dx <= 1; dx++) {
                    color c = temp.get_pixel(x + dx, y + dy);
                    rSum += c.red;
                    gSum += c.green;
                    bSum += c.blue;
                    count++;
                }
            }

            color newColor(rSum / count, gSum / count, bSum / count);
            image.set_pixel(x, y, newColor);
        }
    }
}

// ----------------------
// Main Function
// ----------------------
int main()
{
    BMP image("sample2.bmp");

    // Perform flood fill at (100,100) with red color
    color red(255, 0, 0);
    floodFill(image, 100, 100, red);
    image.write("flood_filled.bmp");
    cout << "Flood fill complete. Saved as flood_filled.bmp" << endl;

    // Apply blur effect
    blur(image);
    image.write("blurred.bmp");
    cout << "Blur effect complete. Saved as blurred.bmp" << endl;

    return 0;
}

